/* automatically generated by rust-bindgen 0.66.1 */

pub type wchar_t = ::std::os::raw::c_int;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __fpos_t = _G_fpos_t;
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
pub type _IO_lock_t = ::std::os::raw::c_void;
pub type fpos_t = __fpos_t;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type float_t = f32;
pub type double_t = f64;
#[doc = "The signature of the C routine that a callback must implement.\nexpr - the expression for the top-level task that was evaluated.\nvalue - the result of the top-level task, i.e. evaluating expr.\nsucceeded - a logical value indicating whether the task completed properly.\nvisible - a logical value indicating whether the result was printed to the R ``console''/stdout.\ndata - user-level data passed to the registration routine."]
pub type R_ToplevelCallback = ::std::option::Option<
    unsafe extern "C" fn(
        expr: SEXP,
        value: SEXP,
        succeeded: Rboolean,
        visible: Rboolean,
        arg1: *mut ::std::os::raw::c_void,
    ) -> Rboolean,
>;
#[doc = "Linked list element for storing the top-level task callbacks."]
pub type R_ToplevelCallbackEl = _ToplevelCallback;
#[doc = "The following definitions are for callbacks to R functions and\nmethods related to user-level tables.  This was implemented in a\nseparate package formerly available from Omegahat and these\ndeclarations allow the package to interface to the internal R code.\n\nSee <https://developer.r-project.org/RObjectTables.pdf>."]
pub type R_ObjectTable = _R_ObjectTable;
#[doc = "Do we actually need the exists() since it is never called but R\nuses get to see if the symbol is bound to anything?"]
pub type Rdb_exists = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        canCache: *mut Rboolean,
        arg1: *mut R_ObjectTable,
    ) -> Rboolean,
>;
pub type Rdb_get = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        canCache: *mut Rboolean,
        arg1: *mut R_ObjectTable,
    ) -> SEXP,
>;
pub type Rdb_remove = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        arg1: *mut R_ObjectTable,
    ) -> ::std::os::raw::c_int,
>;
pub type Rdb_assign = ::std::option::Option<
    unsafe extern "C" fn(
        name: *const ::std::os::raw::c_char,
        value: SEXP,
        arg1: *mut R_ObjectTable,
    ) -> SEXP,
>;
pub type Rdb_objects =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut R_ObjectTable) -> SEXP>;
pub type Rdb_canCache = ::std::option::Option<
    unsafe extern "C" fn(name: *const ::std::os::raw::c_char, arg1: *mut R_ObjectTable) -> Rboolean,
>;
pub type Rdb_onDetach = ::std::option::Option<unsafe extern "C" fn(arg1: *mut R_ObjectTable)>;
pub type Rdb_onAttach = ::std::option::Option<unsafe extern "C" fn(arg1: *mut R_ObjectTable)>;
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[doc = "Linked list element for storing the top-level task callbacks."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ToplevelCallback {
    #[doc = "the C routine to call."]
    pub cb: R_ToplevelCallback,
    #[doc = "the user-level data to pass to the call to cb()"]
    pub data: *mut ::std::os::raw::c_void,
    #[doc = "Called when the callback is removed."]
    pub finalizer: ::std::option::Option<unsafe extern "C" fn(data: *mut ::std::os::raw::c_void)>,
    #[doc = "a name by which to identify this element."]
    pub name: *mut ::std::os::raw::c_char,
    #[doc = "the next element in the linked list."]
    pub next: *mut R_ToplevelCallbackEl,
}
#[repr(C)]
pub struct _R_ObjectTable {
    pub type_: ::std::os::raw::c_int,
    pub cachedNames: *mut *mut ::std::os::raw::c_char,
    pub active: Rboolean,
    pub exists: Rdb_exists,
    pub get: Rdb_get,
    pub remove: Rdb_remove,
    pub assign: Rdb_assign,
    pub objects: Rdb_objects,
    pub canCache: Rdb_canCache,
    pub onDetach: Rdb_onDetach,
    pub onAttach: Rdb_onAttach,
    pub privateData: *mut ::std::os::raw::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const FOPEN_MAX: u32 = 16;
pub const _PRINTF_NAN_LEN_MAX: u32 = 4;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const CHAR_WIDTH: u32 = 8;
pub const SCHAR_WIDTH: u32 = 8;
pub const UCHAR_WIDTH: u32 = 8;
pub const SHRT_WIDTH: u32 = 16;
pub const USHRT_WIDTH: u32 = 16;
pub const INT_WIDTH: u32 = 32;
pub const UINT_WIDTH: u32 = 32;
pub const LONG_WIDTH: u32 = 64;
pub const ULONG_WIDTH: u32 = 64;
pub const LLONG_WIDTH: u32 = 64;
pub const ULLONG_WIDTH: u32 = 64;
pub const BOOL_MAX: u32 = 1;
pub const BOOL_WIDTH: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __FP_LONG_MAX: u64 = 9223372036854775807;
pub const FP_LLOGB0: i64 = -9223372036854775808;
pub const FP_LLOGBNAN: i64 = -9223372036854775808;
pub const FP_INT_UPWARD: u32 = 0;
pub const FP_INT_DOWNWARD: u32 = 1;
pub const FP_INT_TOWARDZERO: u32 = 2;
pub const FP_INT_TONEARESTFROMZERO: u32 = 3;
pub const FP_INT_TONEAREST: u32 = 4;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const FP_INT_UPWARD: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_UPWARD;
pub const FP_INT_DOWNWARD: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_DOWNWARD;
pub const FP_INT_TOWARDZERO: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_TOWARDZERO;
pub const FP_INT_TONEARESTFROMZERO: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_TONEARESTFROMZERO;
pub const FP_INT_TONEAREST: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_TONEAREST;
pub const FP_NAN: _bindgen_ty_2 = _bindgen_ty_2::FP_NAN;
pub const FP_INFINITE: _bindgen_ty_2 = _bindgen_ty_2::FP_INFINITE;
pub const FP_ZERO: _bindgen_ty_2 = _bindgen_ty_2::FP_ZERO;
pub const FP_SUBNORMAL: _bindgen_ty_2 = _bindgen_ty_2::FP_SUBNORMAL;
pub const FP_NORMAL: _bindgen_ty_2 = _bindgen_ty_2::FP_NORMAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_1 {
    FP_INT_UPWARD = 0,
    FP_INT_DOWNWARD = 1,
    FP_INT_TOWARDZERO = 2,
    FP_INT_TONEARESTFROMZERO = 3,
    FP_INT_TONEAREST = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_2 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
extern "C" {
    pub static mut stdin: *mut FILE;
    pub static mut stdout: *mut FILE;
    pub static mut stderr: *mut FILE;
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn tmpfile() -> *mut FILE;
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn getchar() -> ::std::os::raw::c_int;
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
    pub fn rewind(__stream: *mut FILE);
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
    pub fn clearerr(__stream: *mut FILE);
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
    pub fn perror(__s: *const ::std::os::raw::c_char);
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
    pub fn acos(__x: f64) -> f64;
    pub fn __acos(__x: f64) -> f64;
    pub fn asin(__x: f64) -> f64;
    pub fn __asin(__x: f64) -> f64;
    pub fn atan(__x: f64) -> f64;
    pub fn __atan(__x: f64) -> f64;
    pub fn atan2(__y: f64, __x: f64) -> f64;
    pub fn __atan2(__y: f64, __x: f64) -> f64;
    pub fn cos(__x: f64) -> f64;
    pub fn __cos(__x: f64) -> f64;
    pub fn sin(__x: f64) -> f64;
    pub fn __sin(__x: f64) -> f64;
    pub fn tan(__x: f64) -> f64;
    pub fn __tan(__x: f64) -> f64;
    pub fn cosh(__x: f64) -> f64;
    pub fn __cosh(__x: f64) -> f64;
    pub fn sinh(__x: f64) -> f64;
    pub fn __sinh(__x: f64) -> f64;
    pub fn tanh(__x: f64) -> f64;
    pub fn __tanh(__x: f64) -> f64;
    pub fn acosh(__x: f64) -> f64;
    pub fn __acosh(__x: f64) -> f64;
    pub fn asinh(__x: f64) -> f64;
    pub fn __asinh(__x: f64) -> f64;
    pub fn atanh(__x: f64) -> f64;
    pub fn __atanh(__x: f64) -> f64;
    pub fn exp(__x: f64) -> f64;
    pub fn __exp(__x: f64) -> f64;
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    pub fn log(__x: f64) -> f64;
    pub fn __log(__x: f64) -> f64;
    pub fn log10(__x: f64) -> f64;
    pub fn __log10(__x: f64) -> f64;
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
    pub fn exp10(__x: f64) -> f64;
    pub fn __exp10(__x: f64) -> f64;
    pub fn expm1(__x: f64) -> f64;
    pub fn __expm1(__x: f64) -> f64;
    pub fn log1p(__x: f64) -> f64;
    pub fn __log1p(__x: f64) -> f64;
    pub fn logb(__x: f64) -> f64;
    pub fn __logb(__x: f64) -> f64;
    pub fn exp2(__x: f64) -> f64;
    pub fn __exp2(__x: f64) -> f64;
    pub fn log2(__x: f64) -> f64;
    pub fn __log2(__x: f64) -> f64;
    pub fn pow(__x: f64, __y: f64) -> f64;
    pub fn __pow(__x: f64, __y: f64) -> f64;
    pub fn sqrt(__x: f64) -> f64;
    pub fn __sqrt(__x: f64) -> f64;
    pub fn hypot(__x: f64, __y: f64) -> f64;
    pub fn __hypot(__x: f64, __y: f64) -> f64;
    pub fn cbrt(__x: f64) -> f64;
    pub fn __cbrt(__x: f64) -> f64;
    pub fn ceil(__x: f64) -> f64;
    pub fn __ceil(__x: f64) -> f64;
    pub fn fabs(__x: f64) -> f64;
    pub fn __fabs(__x: f64) -> f64;
    pub fn floor(__x: f64) -> f64;
    pub fn __floor(__x: f64) -> f64;
    pub fn fmod(__x: f64, __y: f64) -> f64;
    pub fn __fmod(__x: f64, __y: f64) -> f64;
    pub fn copysign(__x: f64, __y: f64) -> f64;
    pub fn __copysign(__x: f64, __y: f64) -> f64;
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
    pub fn erf(arg1: f64) -> f64;
    pub fn __erf(arg1: f64) -> f64;
    pub fn erfc(arg1: f64) -> f64;
    pub fn __erfc(arg1: f64) -> f64;
    pub fn lgamma(arg1: f64) -> f64;
    pub fn __lgamma(arg1: f64) -> f64;
    pub fn tgamma(arg1: f64) -> f64;
    pub fn __tgamma(arg1: f64) -> f64;
    pub fn rint(__x: f64) -> f64;
    pub fn __rint(__x: f64) -> f64;
    pub fn nextafter(__x: f64, __y: f64) -> f64;
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
    pub fn nextdown(__x: f64) -> f64;
    pub fn __nextdown(__x: f64) -> f64;
    pub fn nextup(__x: f64) -> f64;
    pub fn __nextup(__x: f64) -> f64;
    pub fn remainder(__x: f64, __y: f64) -> f64;
    pub fn __remainder(__x: f64, __y: f64) -> f64;
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
    pub fn llogb(__x: f64) -> ::std::os::raw::c_long;
    pub fn __llogb(__x: f64) -> ::std::os::raw::c_long;
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    pub fn nearbyint(__x: f64) -> f64;
    pub fn __nearbyint(__x: f64) -> f64;
    pub fn round(__x: f64) -> f64;
    pub fn __round(__x: f64) -> f64;
    pub fn trunc(__x: f64) -> f64;
    pub fn __trunc(__x: f64) -> f64;
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn fdim(__x: f64, __y: f64) -> f64;
    pub fn __fdim(__x: f64, __y: f64) -> f64;
    pub fn fmax(__x: f64, __y: f64) -> f64;
    pub fn __fmax(__x: f64, __y: f64) -> f64;
    pub fn fmin(__x: f64, __y: f64) -> f64;
    pub fn __fmin(__x: f64, __y: f64) -> f64;
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
    pub fn roundeven(__x: f64) -> f64;
    pub fn __roundeven(__x: f64) -> f64;
    pub fn fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> ::std::os::raw::c_int;
    pub fn fmaximum(__x: f64, __y: f64) -> f64;
    pub fn __fmaximum(__x: f64, __y: f64) -> f64;
    pub fn fminimum(__x: f64, __y: f64) -> f64;
    pub fn __fminimum(__x: f64, __y: f64) -> f64;
    pub fn fmaximum_num(__x: f64, __y: f64) -> f64;
    pub fn __fmaximum_num(__x: f64, __y: f64) -> f64;
    pub fn fminimum_num(__x: f64, __y: f64) -> f64;
    pub fn __fminimum_num(__x: f64, __y: f64) -> f64;
    pub fn fmaximum_mag(__x: f64, __y: f64) -> f64;
    pub fn __fmaximum_mag(__x: f64, __y: f64) -> f64;
    pub fn fminimum_mag(__x: f64, __y: f64) -> f64;
    pub fn __fminimum_mag(__x: f64, __y: f64) -> f64;
    pub fn fmaximum_mag_num(__x: f64, __y: f64) -> f64;
    pub fn __fmaximum_mag_num(__x: f64, __y: f64) -> f64;
    pub fn fminimum_mag_num(__x: f64, __y: f64) -> f64;
    pub fn __fminimum_mag_num(__x: f64, __y: f64) -> f64;
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
    pub fn acosf(__x: f32) -> f32;
    pub fn __acosf(__x: f32) -> f32;
    pub fn asinf(__x: f32) -> f32;
    pub fn __asinf(__x: f32) -> f32;
    pub fn atanf(__x: f32) -> f32;
    pub fn __atanf(__x: f32) -> f32;
    pub fn atan2f(__y: f32, __x: f32) -> f32;
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
    pub fn cosf(__x: f32) -> f32;
    pub fn __cosf(__x: f32) -> f32;
    pub fn sinf(__x: f32) -> f32;
    pub fn __sinf(__x: f32) -> f32;
    pub fn tanf(__x: f32) -> f32;
    pub fn __tanf(__x: f32) -> f32;
    pub fn coshf(__x: f32) -> f32;
    pub fn __coshf(__x: f32) -> f32;
    pub fn sinhf(__x: f32) -> f32;
    pub fn __sinhf(__x: f32) -> f32;
    pub fn tanhf(__x: f32) -> f32;
    pub fn __tanhf(__x: f32) -> f32;
    pub fn acoshf(__x: f32) -> f32;
    pub fn __acoshf(__x: f32) -> f32;
    pub fn asinhf(__x: f32) -> f32;
    pub fn __asinhf(__x: f32) -> f32;
    pub fn atanhf(__x: f32) -> f32;
    pub fn __atanhf(__x: f32) -> f32;
    pub fn expf(__x: f32) -> f32;
    pub fn __expf(__x: f32) -> f32;
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
    pub fn logf(__x: f32) -> f32;
    pub fn __logf(__x: f32) -> f32;
    pub fn log10f(__x: f32) -> f32;
    pub fn __log10f(__x: f32) -> f32;
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
    pub fn exp10f(__x: f32) -> f32;
    pub fn __exp10f(__x: f32) -> f32;
    pub fn expm1f(__x: f32) -> f32;
    pub fn __expm1f(__x: f32) -> f32;
    pub fn log1pf(__x: f32) -> f32;
    pub fn __log1pf(__x: f32) -> f32;
    pub fn logbf(__x: f32) -> f32;
    pub fn __logbf(__x: f32) -> f32;
    pub fn exp2f(__x: f32) -> f32;
    pub fn __exp2f(__x: f32) -> f32;
    pub fn log2f(__x: f32) -> f32;
    pub fn __log2f(__x: f32) -> f32;
    pub fn powf(__x: f32, __y: f32) -> f32;
    pub fn __powf(__x: f32, __y: f32) -> f32;
    pub fn sqrtf(__x: f32) -> f32;
    pub fn __sqrtf(__x: f32) -> f32;
    pub fn hypotf(__x: f32, __y: f32) -> f32;
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
    pub fn cbrtf(__x: f32) -> f32;
    pub fn __cbrtf(__x: f32) -> f32;
    pub fn ceilf(__x: f32) -> f32;
    pub fn __ceilf(__x: f32) -> f32;
    pub fn fabsf(__x: f32) -> f32;
    pub fn __fabsf(__x: f32) -> f32;
    pub fn floorf(__x: f32) -> f32;
    pub fn __floorf(__x: f32) -> f32;
    pub fn fmodf(__x: f32, __y: f32) -> f32;
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
    pub fn copysignf(__x: f32, __y: f32) -> f32;
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
    pub fn erff(arg1: f32) -> f32;
    pub fn __erff(arg1: f32) -> f32;
    pub fn erfcf(arg1: f32) -> f32;
    pub fn __erfcf(arg1: f32) -> f32;
    pub fn lgammaf(arg1: f32) -> f32;
    pub fn __lgammaf(arg1: f32) -> f32;
    pub fn tgammaf(arg1: f32) -> f32;
    pub fn __tgammaf(arg1: f32) -> f32;
    pub fn rintf(__x: f32) -> f32;
    pub fn __rintf(__x: f32) -> f32;
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
    pub fn nextdownf(__x: f32) -> f32;
    pub fn __nextdownf(__x: f32) -> f32;
    pub fn nextupf(__x: f32) -> f32;
    pub fn __nextupf(__x: f32) -> f32;
    pub fn remainderf(__x: f32, __y: f32) -> f32;
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
    pub fn llogbf(__x: f32) -> ::std::os::raw::c_long;
    pub fn __llogbf(__x: f32) -> ::std::os::raw::c_long;
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
    pub fn nearbyintf(__x: f32) -> f32;
    pub fn __nearbyintf(__x: f32) -> f32;
    pub fn roundf(__x: f32) -> f32;
    pub fn __roundf(__x: f32) -> f32;
    pub fn truncf(__x: f32) -> f32;
    pub fn __truncf(__x: f32) -> f32;
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn fdimf(__x: f32, __y: f32) -> f32;
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
    pub fn fminf(__x: f32, __y: f32) -> f32;
    pub fn __fminf(__x: f32, __y: f32) -> f32;
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    pub fn roundevenf(__x: f32) -> f32;
    pub fn __roundevenf(__x: f32) -> f32;
    pub fn fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> ::std::os::raw::c_int;
    pub fn fmaximumf(__x: f32, __y: f32) -> f32;
    pub fn __fmaximumf(__x: f32, __y: f32) -> f32;
    pub fn fminimumf(__x: f32, __y: f32) -> f32;
    pub fn __fminimumf(__x: f32, __y: f32) -> f32;
    pub fn fmaximum_numf(__x: f32, __y: f32) -> f32;
    pub fn __fmaximum_numf(__x: f32, __y: f32) -> f32;
    pub fn fminimum_numf(__x: f32, __y: f32) -> f32;
    pub fn __fminimum_numf(__x: f32, __y: f32) -> f32;
    pub fn fmaximum_magf(__x: f32, __y: f32) -> f32;
    pub fn __fmaximum_magf(__x: f32, __y: f32) -> f32;
    pub fn fminimum_magf(__x: f32, __y: f32) -> f32;
    pub fn __fminimum_magf(__x: f32, __y: f32) -> f32;
    pub fn fmaximum_mag_numf(__x: f32, __y: f32) -> f32;
    pub fn __fmaximum_mag_numf(__x: f32, __y: f32) -> f32;
    pub fn fminimum_mag_numf(__x: f32, __y: f32) -> f32;
    pub fn __fminimum_mag_numf(__x: f32, __y: f32) -> f32;
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
    pub fn acosl(__x: u128) -> u128;
    pub fn __acosl(__x: u128) -> u128;
    pub fn asinl(__x: u128) -> u128;
    pub fn __asinl(__x: u128) -> u128;
    pub fn atanl(__x: u128) -> u128;
    pub fn __atanl(__x: u128) -> u128;
    pub fn atan2l(__y: u128, __x: u128) -> u128;
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
    pub fn cosl(__x: u128) -> u128;
    pub fn __cosl(__x: u128) -> u128;
    pub fn sinl(__x: u128) -> u128;
    pub fn __sinl(__x: u128) -> u128;
    pub fn tanl(__x: u128) -> u128;
    pub fn __tanl(__x: u128) -> u128;
    pub fn coshl(__x: u128) -> u128;
    pub fn __coshl(__x: u128) -> u128;
    pub fn sinhl(__x: u128) -> u128;
    pub fn __sinhl(__x: u128) -> u128;
    pub fn tanhl(__x: u128) -> u128;
    pub fn __tanhl(__x: u128) -> u128;
    pub fn acoshl(__x: u128) -> u128;
    pub fn __acoshl(__x: u128) -> u128;
    pub fn asinhl(__x: u128) -> u128;
    pub fn __asinhl(__x: u128) -> u128;
    pub fn atanhl(__x: u128) -> u128;
    pub fn __atanhl(__x: u128) -> u128;
    pub fn expl(__x: u128) -> u128;
    pub fn __expl(__x: u128) -> u128;
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
    pub fn logl(__x: u128) -> u128;
    pub fn __logl(__x: u128) -> u128;
    pub fn log10l(__x: u128) -> u128;
    pub fn __log10l(__x: u128) -> u128;
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
    pub fn exp10l(__x: u128) -> u128;
    pub fn __exp10l(__x: u128) -> u128;
    pub fn expm1l(__x: u128) -> u128;
    pub fn __expm1l(__x: u128) -> u128;
    pub fn log1pl(__x: u128) -> u128;
    pub fn __log1pl(__x: u128) -> u128;
    pub fn logbl(__x: u128) -> u128;
    pub fn __logbl(__x: u128) -> u128;
    pub fn exp2l(__x: u128) -> u128;
    pub fn __exp2l(__x: u128) -> u128;
    pub fn log2l(__x: u128) -> u128;
    pub fn __log2l(__x: u128) -> u128;
    pub fn powl(__x: u128, __y: u128) -> u128;
    pub fn __powl(__x: u128, __y: u128) -> u128;
    pub fn sqrtl(__x: u128) -> u128;
    pub fn __sqrtl(__x: u128) -> u128;
    pub fn hypotl(__x: u128, __y: u128) -> u128;
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
    pub fn cbrtl(__x: u128) -> u128;
    pub fn __cbrtl(__x: u128) -> u128;
    pub fn ceill(__x: u128) -> u128;
    pub fn __ceill(__x: u128) -> u128;
    pub fn fabsl(__x: u128) -> u128;
    pub fn __fabsl(__x: u128) -> u128;
    pub fn floorl(__x: u128) -> u128;
    pub fn __floorl(__x: u128) -> u128;
    pub fn fmodl(__x: u128, __y: u128) -> u128;
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
    pub fn copysignl(__x: u128, __y: u128) -> u128;
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
    pub fn erfl(arg1: u128) -> u128;
    pub fn __erfl(arg1: u128) -> u128;
    pub fn erfcl(arg1: u128) -> u128;
    pub fn __erfcl(arg1: u128) -> u128;
    pub fn lgammal(arg1: u128) -> u128;
    pub fn __lgammal(arg1: u128) -> u128;
    pub fn tgammal(arg1: u128) -> u128;
    pub fn __tgammal(arg1: u128) -> u128;
    pub fn rintl(__x: u128) -> u128;
    pub fn __rintl(__x: u128) -> u128;
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
    pub fn nextdownl(__x: u128) -> u128;
    pub fn __nextdownl(__x: u128) -> u128;
    pub fn nextupl(__x: u128) -> u128;
    pub fn __nextupl(__x: u128) -> u128;
    pub fn remainderl(__x: u128, __y: u128) -> u128;
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
    pub fn llogbl(__x: u128) -> ::std::os::raw::c_long;
    pub fn __llogbl(__x: u128) -> ::std::os::raw::c_long;
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
    pub fn nearbyintl(__x: u128) -> u128;
    pub fn __nearbyintl(__x: u128) -> u128;
    pub fn roundl(__x: u128) -> u128;
    pub fn __roundl(__x: u128) -> u128;
    pub fn truncl(__x: u128) -> u128;
    pub fn __truncl(__x: u128) -> u128;
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
    pub fn fdiml(__x: u128, __y: u128) -> u128;
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
    pub fn fminl(__x: u128, __y: u128) -> u128;
    pub fn __fminl(__x: u128, __y: u128) -> u128;
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
    pub fn roundevenl(__x: u128) -> u128;
    pub fn __roundevenl(__x: u128) -> u128;
    pub fn fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn canonicalizel(__cx: *mut u128, __x: *const u128) -> ::std::os::raw::c_int;
    pub fn fmaximuml(__x: u128, __y: u128) -> u128;
    pub fn __fmaximuml(__x: u128, __y: u128) -> u128;
    pub fn fminimuml(__x: u128, __y: u128) -> u128;
    pub fn __fminimuml(__x: u128, __y: u128) -> u128;
    pub fn fmaximum_numl(__x: u128, __y: u128) -> u128;
    pub fn __fmaximum_numl(__x: u128, __y: u128) -> u128;
    pub fn fminimum_numl(__x: u128, __y: u128) -> u128;
    pub fn __fminimum_numl(__x: u128, __y: u128) -> u128;
    pub fn fmaximum_magl(__x: u128, __y: u128) -> u128;
    pub fn __fmaximum_magl(__x: u128, __y: u128) -> u128;
    pub fn fminimum_magl(__x: u128, __y: u128) -> u128;
    pub fn __fminimum_magl(__x: u128, __y: u128) -> u128;
    pub fn fmaximum_mag_numl(__x: u128, __y: u128) -> u128;
    pub fn __fmaximum_mag_numl(__x: u128, __y: u128) -> u128;
    pub fn fminimum_mag_numl(__x: u128, __y: u128) -> u128;
    pub fn __fminimum_mag_numl(__x: u128, __y: u128) -> u128;
    pub fn fadd(__x: f64, __y: f64) -> f32;
    pub fn fdiv(__x: f64, __y: f64) -> f32;
    pub fn ffma(__x: f64, __y: f64, __z: f64) -> f32;
    pub fn fmul(__x: f64, __y: f64) -> f32;
    pub fn fsqrt(__x: f64) -> f32;
    pub fn fsub(__x: f64, __y: f64) -> f32;
    pub fn faddl(__x: u128, __y: u128) -> f32;
    pub fn fdivl(__x: u128, __y: u128) -> f32;
    pub fn ffmal(__x: u128, __y: u128, __z: u128) -> f32;
    pub fn fmull(__x: u128, __y: u128) -> f32;
    pub fn fsqrtl(__x: u128) -> f32;
    pub fn fsubl(__x: u128, __y: u128) -> f32;
    pub fn daddl(__x: u128, __y: u128) -> f64;
    pub fn ddivl(__x: u128, __y: u128) -> f64;
    pub fn dfmal(__x: u128, __y: u128, __z: u128) -> f64;
    pub fn dmull(__x: u128, __y: u128) -> f64;
    pub fn dsqrtl(__x: u128) -> f64;
    pub fn dsubl(__x: u128, __y: u128) -> f64;
    pub fn __iscanonicall(__x: u128) -> ::std::os::raw::c_int;
    pub fn Rf_removeTaskCallbackByIndex(id: ::std::os::raw::c_int) -> Rboolean;
    pub fn Rf_removeTaskCallbackByName(name: *const ::std::os::raw::c_char) -> Rboolean;
    pub fn R_removeTaskCallback(which: SEXP) -> SEXP;
    pub fn Rf_addTaskCallback(
        cb: R_ToplevelCallback,
        data: *mut ::std::os::raw::c_void,
        finalizer: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        name: *const ::std::os::raw::c_char,
        pos: *mut ::std::os::raw::c_int,
    ) -> *mut R_ToplevelCallbackEl;
}
