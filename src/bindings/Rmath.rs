/* automatically generated by rust-bindgen 0.66.1 */

pub type wchar_t = ::std::os::raw::c_int;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
pub type float_t = f32;
pub type double_t = f64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
pub const __STDC_WANT_IEC_60559_FUNCS_EXT__: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __FP_LONG_MAX: u64 = 9223372036854775807;
pub const FP_LLOGB0: i64 = -9223372036854775808;
pub const FP_LLOGBNAN: i64 = -9223372036854775808;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const R_VERSION_STRING: &[u8; 6] = b"4.3.1\0";
pub const HAVE_EXPM1: u32 = 1;
pub const HAVE_HYPOT: u32 = 1;
pub const HAVE_LOG1P: u32 = 1;
pub const HAVE_WORKING_LOG1P: u32 = 1;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_2PI: f64 = 6.283185307179586;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const M_SQRT_3: f64 = 1.7320508075688772;
pub const M_SQRT_32: f64 = 5.656854249492381;
pub const M_LOG10_2: f64 = 0.3010299956639812;
pub const M_SQRT_PI: f64 = 1.772453850905516;
pub const M_1_SQRT_2PI: f64 = 0.3989422804014327;
pub const M_SQRT_2dPI: f64 = 0.7978845608028654;
pub const M_LN_2PI: f64 = 1.8378770664093456;
pub const M_LN_SQRT_PI: f64 = 0.5723649429247001;
pub const M_LN_SQRT_2PI: f64 = 0.9189385332046728;
pub const M_LN_SQRT_PId2: f64 = 0.22579135264472744;
pub const FP_INT_UPWARD: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_UPWARD;
pub const FP_INT_DOWNWARD: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_DOWNWARD;
pub const FP_INT_TOWARDZERO: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_TOWARDZERO;
pub const FP_INT_TONEARESTFROMZERO: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_TONEARESTFROMZERO;
pub const FP_INT_TONEAREST: _bindgen_ty_1 = _bindgen_ty_1::FP_INT_TONEAREST;
pub const FP_NAN: _bindgen_ty_2 = _bindgen_ty_2::FP_NAN;
pub const FP_INFINITE: _bindgen_ty_2 = _bindgen_ty_2::FP_INFINITE;
pub const FP_ZERO: _bindgen_ty_2 = _bindgen_ty_2::FP_ZERO;
pub const FP_SUBNORMAL: _bindgen_ty_2 = _bindgen_ty_2::FP_SUBNORMAL;
pub const FP_NORMAL: _bindgen_ty_2 = _bindgen_ty_2::FP_NORMAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_1 {
    FP_INT_UPWARD = 0,
    FP_INT_DOWNWARD = 1,
    FP_INT_TOWARDZERO = 2,
    FP_INT_TONEARESTFROMZERO = 3,
    FP_INT_TONEAREST = 4,
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum _bindgen_ty_2 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
    pub fn __iseqsig(__x: f64, __y: f64) -> ::std::os::raw::c_int;
    pub fn __issignaling(__value: f64) -> ::std::os::raw::c_int;
    pub fn acos(__x: f64) -> f64;
    pub fn __acos(__x: f64) -> f64;
    pub fn asin(__x: f64) -> f64;
    pub fn __asin(__x: f64) -> f64;
    pub fn atan(__x: f64) -> f64;
    pub fn __atan(__x: f64) -> f64;
    pub fn atan2(__y: f64, __x: f64) -> f64;
    pub fn __atan2(__y: f64, __x: f64) -> f64;
    pub fn cos(__x: f64) -> f64;
    pub fn __cos(__x: f64) -> f64;
    pub fn sin(__x: f64) -> f64;
    pub fn __sin(__x: f64) -> f64;
    pub fn tan(__x: f64) -> f64;
    pub fn __tan(__x: f64) -> f64;
    pub fn cosh(__x: f64) -> f64;
    pub fn __cosh(__x: f64) -> f64;
    pub fn sinh(__x: f64) -> f64;
    pub fn __sinh(__x: f64) -> f64;
    pub fn tanh(__x: f64) -> f64;
    pub fn __tanh(__x: f64) -> f64;
    pub fn acosh(__x: f64) -> f64;
    pub fn __acosh(__x: f64) -> f64;
    pub fn asinh(__x: f64) -> f64;
    pub fn __asinh(__x: f64) -> f64;
    pub fn atanh(__x: f64) -> f64;
    pub fn __atanh(__x: f64) -> f64;
    pub fn exp(__x: f64) -> f64;
    pub fn __exp(__x: f64) -> f64;
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
    pub fn log(__x: f64) -> f64;
    pub fn __log(__x: f64) -> f64;
    pub fn log10(__x: f64) -> f64;
    pub fn __log10(__x: f64) -> f64;
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
    pub fn exp10(__x: f64) -> f64;
    pub fn __exp10(__x: f64) -> f64;
    pub fn expm1(__x: f64) -> f64;
    pub fn __expm1(__x: f64) -> f64;
    pub fn log1p(__x: f64) -> f64;
    pub fn __log1p(__x: f64) -> f64;
    pub fn logb(__x: f64) -> f64;
    pub fn __logb(__x: f64) -> f64;
    pub fn exp2(__x: f64) -> f64;
    pub fn __exp2(__x: f64) -> f64;
    pub fn log2(__x: f64) -> f64;
    pub fn __log2(__x: f64) -> f64;
    pub fn pow(__x: f64, __y: f64) -> f64;
    pub fn __pow(__x: f64, __y: f64) -> f64;
    pub fn sqrt(__x: f64) -> f64;
    pub fn __sqrt(__x: f64) -> f64;
    pub fn hypot(__x: f64, __y: f64) -> f64;
    pub fn __hypot(__x: f64, __y: f64) -> f64;
    pub fn cbrt(__x: f64) -> f64;
    pub fn __cbrt(__x: f64) -> f64;
    pub fn ceil(__x: f64) -> f64;
    pub fn __ceil(__x: f64) -> f64;
    pub fn fabs(__x: f64) -> f64;
    pub fn __fabs(__x: f64) -> f64;
    pub fn floor(__x: f64) -> f64;
    pub fn __floor(__x: f64) -> f64;
    pub fn fmod(__x: f64, __y: f64) -> f64;
    pub fn __fmod(__x: f64, __y: f64) -> f64;
    pub fn copysign(__x: f64, __y: f64) -> f64;
    pub fn __copysign(__x: f64, __y: f64) -> f64;
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
    pub fn erf(arg1: f64) -> f64;
    pub fn __erf(arg1: f64) -> f64;
    pub fn erfc(arg1: f64) -> f64;
    pub fn __erfc(arg1: f64) -> f64;
    pub fn lgamma(arg1: f64) -> f64;
    pub fn __lgamma(arg1: f64) -> f64;
    pub fn tgamma(arg1: f64) -> f64;
    pub fn __tgamma(arg1: f64) -> f64;
    pub fn rint(__x: f64) -> f64;
    pub fn __rint(__x: f64) -> f64;
    pub fn nextafter(__x: f64, __y: f64) -> f64;
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
    pub fn nextdown(__x: f64) -> f64;
    pub fn __nextdown(__x: f64) -> f64;
    pub fn nextup(__x: f64) -> f64;
    pub fn __nextup(__x: f64) -> f64;
    pub fn remainder(__x: f64, __y: f64) -> f64;
    pub fn __remainder(__x: f64, __y: f64) -> f64;
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
    pub fn llogb(__x: f64) -> ::std::os::raw::c_long;
    pub fn __llogb(__x: f64) -> ::std::os::raw::c_long;
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
    pub fn nearbyint(__x: f64) -> f64;
    pub fn __nearbyint(__x: f64) -> f64;
    pub fn round(__x: f64) -> f64;
    pub fn __round(__x: f64) -> f64;
    pub fn trunc(__x: f64) -> f64;
    pub fn __trunc(__x: f64) -> f64;
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int) -> f64;
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
    pub fn fdim(__x: f64, __y: f64) -> f64;
    pub fn __fdim(__x: f64, __y: f64) -> f64;
    pub fn fmax(__x: f64, __y: f64) -> f64;
    pub fn __fmax(__x: f64, __y: f64) -> f64;
    pub fn fmin(__x: f64, __y: f64) -> f64;
    pub fn __fmin(__x: f64, __y: f64) -> f64;
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
    pub fn roundeven(__x: f64) -> f64;
    pub fn __roundeven(__x: f64) -> f64;
    pub fn fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfp(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpx(
        __x: f64,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn canonicalize(__cx: *mut f64, __x: *const f64) -> ::std::os::raw::c_int;
    pub fn fmaximum(__x: f64, __y: f64) -> f64;
    pub fn __fmaximum(__x: f64, __y: f64) -> f64;
    pub fn fminimum(__x: f64, __y: f64) -> f64;
    pub fn __fminimum(__x: f64, __y: f64) -> f64;
    pub fn fmaximum_num(__x: f64, __y: f64) -> f64;
    pub fn __fmaximum_num(__x: f64, __y: f64) -> f64;
    pub fn fminimum_num(__x: f64, __y: f64) -> f64;
    pub fn __fminimum_num(__x: f64, __y: f64) -> f64;
    pub fn fmaximum_mag(__x: f64, __y: f64) -> f64;
    pub fn __fmaximum_mag(__x: f64, __y: f64) -> f64;
    pub fn fminimum_mag(__x: f64, __y: f64) -> f64;
    pub fn __fminimum_mag(__x: f64, __y: f64) -> f64;
    pub fn fmaximum_mag_num(__x: f64, __y: f64) -> f64;
    pub fn __fmaximum_mag_num(__x: f64, __y: f64) -> f64;
    pub fn fminimum_mag_num(__x: f64, __y: f64) -> f64;
    pub fn __fminimum_mag_num(__x: f64, __y: f64) -> f64;
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
    pub fn __iseqsigf(__x: f32, __y: f32) -> ::std::os::raw::c_int;
    pub fn __issignalingf(__value: f32) -> ::std::os::raw::c_int;
    pub fn acosf(__x: f32) -> f32;
    pub fn __acosf(__x: f32) -> f32;
    pub fn asinf(__x: f32) -> f32;
    pub fn __asinf(__x: f32) -> f32;
    pub fn atanf(__x: f32) -> f32;
    pub fn __atanf(__x: f32) -> f32;
    pub fn atan2f(__y: f32, __x: f32) -> f32;
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
    pub fn cosf(__x: f32) -> f32;
    pub fn __cosf(__x: f32) -> f32;
    pub fn sinf(__x: f32) -> f32;
    pub fn __sinf(__x: f32) -> f32;
    pub fn tanf(__x: f32) -> f32;
    pub fn __tanf(__x: f32) -> f32;
    pub fn coshf(__x: f32) -> f32;
    pub fn __coshf(__x: f32) -> f32;
    pub fn sinhf(__x: f32) -> f32;
    pub fn __sinhf(__x: f32) -> f32;
    pub fn tanhf(__x: f32) -> f32;
    pub fn __tanhf(__x: f32) -> f32;
    pub fn acoshf(__x: f32) -> f32;
    pub fn __acoshf(__x: f32) -> f32;
    pub fn asinhf(__x: f32) -> f32;
    pub fn __asinhf(__x: f32) -> f32;
    pub fn atanhf(__x: f32) -> f32;
    pub fn __atanhf(__x: f32) -> f32;
    pub fn expf(__x: f32) -> f32;
    pub fn __expf(__x: f32) -> f32;
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
    pub fn logf(__x: f32) -> f32;
    pub fn __logf(__x: f32) -> f32;
    pub fn log10f(__x: f32) -> f32;
    pub fn __log10f(__x: f32) -> f32;
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
    pub fn exp10f(__x: f32) -> f32;
    pub fn __exp10f(__x: f32) -> f32;
    pub fn expm1f(__x: f32) -> f32;
    pub fn __expm1f(__x: f32) -> f32;
    pub fn log1pf(__x: f32) -> f32;
    pub fn __log1pf(__x: f32) -> f32;
    pub fn logbf(__x: f32) -> f32;
    pub fn __logbf(__x: f32) -> f32;
    pub fn exp2f(__x: f32) -> f32;
    pub fn __exp2f(__x: f32) -> f32;
    pub fn log2f(__x: f32) -> f32;
    pub fn __log2f(__x: f32) -> f32;
    pub fn powf(__x: f32, __y: f32) -> f32;
    pub fn __powf(__x: f32, __y: f32) -> f32;
    pub fn sqrtf(__x: f32) -> f32;
    pub fn __sqrtf(__x: f32) -> f32;
    pub fn hypotf(__x: f32, __y: f32) -> f32;
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
    pub fn cbrtf(__x: f32) -> f32;
    pub fn __cbrtf(__x: f32) -> f32;
    pub fn ceilf(__x: f32) -> f32;
    pub fn __ceilf(__x: f32) -> f32;
    pub fn fabsf(__x: f32) -> f32;
    pub fn __fabsf(__x: f32) -> f32;
    pub fn floorf(__x: f32) -> f32;
    pub fn __floorf(__x: f32) -> f32;
    pub fn fmodf(__x: f32, __y: f32) -> f32;
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
    pub fn copysignf(__x: f32, __y: f32) -> f32;
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
    pub fn erff(arg1: f32) -> f32;
    pub fn __erff(arg1: f32) -> f32;
    pub fn erfcf(arg1: f32) -> f32;
    pub fn __erfcf(arg1: f32) -> f32;
    pub fn lgammaf(arg1: f32) -> f32;
    pub fn __lgammaf(arg1: f32) -> f32;
    pub fn tgammaf(arg1: f32) -> f32;
    pub fn __tgammaf(arg1: f32) -> f32;
    pub fn rintf(__x: f32) -> f32;
    pub fn __rintf(__x: f32) -> f32;
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
    pub fn nextdownf(__x: f32) -> f32;
    pub fn __nextdownf(__x: f32) -> f32;
    pub fn nextupf(__x: f32) -> f32;
    pub fn __nextupf(__x: f32) -> f32;
    pub fn remainderf(__x: f32, __y: f32) -> f32;
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
    pub fn llogbf(__x: f32) -> ::std::os::raw::c_long;
    pub fn __llogbf(__x: f32) -> ::std::os::raw::c_long;
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
    pub fn nearbyintf(__x: f32) -> f32;
    pub fn __nearbyintf(__x: f32) -> f32;
    pub fn roundf(__x: f32) -> f32;
    pub fn __roundf(__x: f32) -> f32;
    pub fn truncf(__x: f32) -> f32;
    pub fn __truncf(__x: f32) -> f32;
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int) -> f32;
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
    pub fn fdimf(__x: f32, __y: f32) -> f32;
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
    pub fn fminf(__x: f32, __y: f32) -> f32;
    pub fn __fminf(__x: f32, __y: f32) -> f32;
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
    pub fn roundevenf(__x: f32) -> f32;
    pub fn __roundevenf(__x: f32) -> f32;
    pub fn fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpxf(
        __x: f32,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn canonicalizef(__cx: *mut f32, __x: *const f32) -> ::std::os::raw::c_int;
    pub fn fmaximumf(__x: f32, __y: f32) -> f32;
    pub fn __fmaximumf(__x: f32, __y: f32) -> f32;
    pub fn fminimumf(__x: f32, __y: f32) -> f32;
    pub fn __fminimumf(__x: f32, __y: f32) -> f32;
    pub fn fmaximum_numf(__x: f32, __y: f32) -> f32;
    pub fn __fmaximum_numf(__x: f32, __y: f32) -> f32;
    pub fn fminimum_numf(__x: f32, __y: f32) -> f32;
    pub fn __fminimum_numf(__x: f32, __y: f32) -> f32;
    pub fn fmaximum_magf(__x: f32, __y: f32) -> f32;
    pub fn __fmaximum_magf(__x: f32, __y: f32) -> f32;
    pub fn fminimum_magf(__x: f32, __y: f32) -> f32;
    pub fn __fminimum_magf(__x: f32, __y: f32) -> f32;
    pub fn fmaximum_mag_numf(__x: f32, __y: f32) -> f32;
    pub fn __fmaximum_mag_numf(__x: f32, __y: f32) -> f32;
    pub fn fminimum_mag_numf(__x: f32, __y: f32) -> f32;
    pub fn __fminimum_mag_numf(__x: f32, __y: f32) -> f32;
    pub fn __fpclassifyl(__value: u128) -> ::std::os::raw::c_int;
    pub fn __signbitl(__value: u128) -> ::std::os::raw::c_int;
    pub fn __isinfl(__value: u128) -> ::std::os::raw::c_int;
    pub fn __finitel(__value: u128) -> ::std::os::raw::c_int;
    pub fn __isnanl(__value: u128) -> ::std::os::raw::c_int;
    pub fn __iseqsigl(__x: u128, __y: u128) -> ::std::os::raw::c_int;
    pub fn __issignalingl(__value: u128) -> ::std::os::raw::c_int;
    pub fn acosl(__x: u128) -> u128;
    pub fn __acosl(__x: u128) -> u128;
    pub fn asinl(__x: u128) -> u128;
    pub fn __asinl(__x: u128) -> u128;
    pub fn atanl(__x: u128) -> u128;
    pub fn __atanl(__x: u128) -> u128;
    pub fn atan2l(__y: u128, __x: u128) -> u128;
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
    pub fn cosl(__x: u128) -> u128;
    pub fn __cosl(__x: u128) -> u128;
    pub fn sinl(__x: u128) -> u128;
    pub fn __sinl(__x: u128) -> u128;
    pub fn tanl(__x: u128) -> u128;
    pub fn __tanl(__x: u128) -> u128;
    pub fn coshl(__x: u128) -> u128;
    pub fn __coshl(__x: u128) -> u128;
    pub fn sinhl(__x: u128) -> u128;
    pub fn __sinhl(__x: u128) -> u128;
    pub fn tanhl(__x: u128) -> u128;
    pub fn __tanhl(__x: u128) -> u128;
    pub fn acoshl(__x: u128) -> u128;
    pub fn __acoshl(__x: u128) -> u128;
    pub fn asinhl(__x: u128) -> u128;
    pub fn __asinhl(__x: u128) -> u128;
    pub fn atanhl(__x: u128) -> u128;
    pub fn __atanhl(__x: u128) -> u128;
    pub fn expl(__x: u128) -> u128;
    pub fn __expl(__x: u128) -> u128;
    pub fn frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
    pub fn __frexpl(__x: u128, __exponent: *mut ::std::os::raw::c_int) -> u128;
    pub fn ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
    pub fn __ldexpl(__x: u128, __exponent: ::std::os::raw::c_int) -> u128;
    pub fn logl(__x: u128) -> u128;
    pub fn __logl(__x: u128) -> u128;
    pub fn log10l(__x: u128) -> u128;
    pub fn __log10l(__x: u128) -> u128;
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
    pub fn exp10l(__x: u128) -> u128;
    pub fn __exp10l(__x: u128) -> u128;
    pub fn expm1l(__x: u128) -> u128;
    pub fn __expm1l(__x: u128) -> u128;
    pub fn log1pl(__x: u128) -> u128;
    pub fn __log1pl(__x: u128) -> u128;
    pub fn logbl(__x: u128) -> u128;
    pub fn __logbl(__x: u128) -> u128;
    pub fn exp2l(__x: u128) -> u128;
    pub fn __exp2l(__x: u128) -> u128;
    pub fn log2l(__x: u128) -> u128;
    pub fn __log2l(__x: u128) -> u128;
    pub fn powl(__x: u128, __y: u128) -> u128;
    pub fn __powl(__x: u128, __y: u128) -> u128;
    pub fn sqrtl(__x: u128) -> u128;
    pub fn __sqrtl(__x: u128) -> u128;
    pub fn hypotl(__x: u128, __y: u128) -> u128;
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
    pub fn cbrtl(__x: u128) -> u128;
    pub fn __cbrtl(__x: u128) -> u128;
    pub fn ceill(__x: u128) -> u128;
    pub fn __ceill(__x: u128) -> u128;
    pub fn fabsl(__x: u128) -> u128;
    pub fn __fabsl(__x: u128) -> u128;
    pub fn floorl(__x: u128) -> u128;
    pub fn __floorl(__x: u128) -> u128;
    pub fn fmodl(__x: u128, __y: u128) -> u128;
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
    pub fn copysignl(__x: u128, __y: u128) -> u128;
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> u128;
    pub fn erfl(arg1: u128) -> u128;
    pub fn __erfl(arg1: u128) -> u128;
    pub fn erfcl(arg1: u128) -> u128;
    pub fn __erfcl(arg1: u128) -> u128;
    pub fn lgammal(arg1: u128) -> u128;
    pub fn __lgammal(arg1: u128) -> u128;
    pub fn tgammal(arg1: u128) -> u128;
    pub fn __tgammal(arg1: u128) -> u128;
    pub fn rintl(__x: u128) -> u128;
    pub fn __rintl(__x: u128) -> u128;
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
    pub fn nextdownl(__x: u128) -> u128;
    pub fn __nextdownl(__x: u128) -> u128;
    pub fn nextupl(__x: u128) -> u128;
    pub fn __nextupl(__x: u128) -> u128;
    pub fn remainderl(__x: u128, __y: u128) -> u128;
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
    pub fn scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
    pub fn __scalbnl(__x: u128, __n: ::std::os::raw::c_int) -> u128;
    pub fn ilogbl(__x: u128) -> ::std::os::raw::c_int;
    pub fn __ilogbl(__x: u128) -> ::std::os::raw::c_int;
    pub fn llogbl(__x: u128) -> ::std::os::raw::c_long;
    pub fn __llogbl(__x: u128) -> ::std::os::raw::c_long;
    pub fn scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
    pub fn __scalblnl(__x: u128, __n: ::std::os::raw::c_long) -> u128;
    pub fn nearbyintl(__x: u128) -> u128;
    pub fn __nearbyintl(__x: u128) -> u128;
    pub fn roundl(__x: u128) -> u128;
    pub fn __roundl(__x: u128) -> u128;
    pub fn truncl(__x: u128) -> u128;
    pub fn __truncl(__x: u128) -> u128;
    pub fn remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut ::std::os::raw::c_int) -> u128;
    pub fn lrintl(__x: u128) -> ::std::os::raw::c_long;
    pub fn __lrintl(__x: u128) -> ::std::os::raw::c_long;
    pub fn llrintl(__x: u128) -> ::std::os::raw::c_longlong;
    pub fn __llrintl(__x: u128) -> ::std::os::raw::c_longlong;
    pub fn lroundl(__x: u128) -> ::std::os::raw::c_long;
    pub fn __lroundl(__x: u128) -> ::std::os::raw::c_long;
    pub fn llroundl(__x: u128) -> ::std::os::raw::c_longlong;
    pub fn __llroundl(__x: u128) -> ::std::os::raw::c_longlong;
    pub fn fdiml(__x: u128, __y: u128) -> u128;
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
    pub fn fminl(__x: u128, __y: u128) -> u128;
    pub fn __fminl(__x: u128, __y: u128) -> u128;
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
    pub fn roundevenl(__x: u128) -> u128;
    pub fn __roundevenl(__x: u128) -> u128;
    pub fn fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn __fromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __intmax_t;
    pub fn ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn __ufromfpxl(
        __x: u128,
        __round: ::std::os::raw::c_int,
        __width: ::std::os::raw::c_uint,
    ) -> __uintmax_t;
    pub fn canonicalizel(__cx: *mut u128, __x: *const u128) -> ::std::os::raw::c_int;
    pub fn fmaximuml(__x: u128, __y: u128) -> u128;
    pub fn __fmaximuml(__x: u128, __y: u128) -> u128;
    pub fn fminimuml(__x: u128, __y: u128) -> u128;
    pub fn __fminimuml(__x: u128, __y: u128) -> u128;
    pub fn fmaximum_numl(__x: u128, __y: u128) -> u128;
    pub fn __fmaximum_numl(__x: u128, __y: u128) -> u128;
    pub fn fminimum_numl(__x: u128, __y: u128) -> u128;
    pub fn __fminimum_numl(__x: u128, __y: u128) -> u128;
    pub fn fmaximum_magl(__x: u128, __y: u128) -> u128;
    pub fn __fmaximum_magl(__x: u128, __y: u128) -> u128;
    pub fn fminimum_magl(__x: u128, __y: u128) -> u128;
    pub fn __fminimum_magl(__x: u128, __y: u128) -> u128;
    pub fn fmaximum_mag_numl(__x: u128, __y: u128) -> u128;
    pub fn __fmaximum_mag_numl(__x: u128, __y: u128) -> u128;
    pub fn fminimum_mag_numl(__x: u128, __y: u128) -> u128;
    pub fn __fminimum_mag_numl(__x: u128, __y: u128) -> u128;
    pub fn fadd(__x: f64, __y: f64) -> f32;
    pub fn fdiv(__x: f64, __y: f64) -> f32;
    pub fn ffma(__x: f64, __y: f64, __z: f64) -> f32;
    pub fn fmul(__x: f64, __y: f64) -> f32;
    pub fn fsqrt(__x: f64) -> f32;
    pub fn fsub(__x: f64, __y: f64) -> f32;
    pub fn faddl(__x: u128, __y: u128) -> f32;
    pub fn fdivl(__x: u128, __y: u128) -> f32;
    pub fn ffmal(__x: u128, __y: u128, __z: u128) -> f32;
    pub fn fmull(__x: u128, __y: u128) -> f32;
    pub fn fsqrtl(__x: u128) -> f32;
    pub fn fsubl(__x: u128, __y: u128) -> f32;
    pub fn daddl(__x: u128, __y: u128) -> f64;
    pub fn ddivl(__x: u128, __y: u128) -> f64;
    pub fn dfmal(__x: u128, __y: u128, __z: u128) -> f64;
    pub fn dmull(__x: u128, __y: u128) -> f64;
    pub fn dsqrtl(__x: u128) -> f64;
    pub fn dsubl(__x: u128, __y: u128) -> f64;
    pub fn __iscanonicall(__x: u128) -> ::std::os::raw::c_int;
    #[doc = "R's versions with !R_FINITE checks"]
    pub fn R_pow(x: f64, y: f64) -> f64;
    pub fn R_pow_di(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    #[doc = "Random Number Generators"]
    pub fn norm_rand() -> f64;
    pub fn unif_rand() -> f64;
    pub fn R_unif_index(arg1: f64) -> f64;
    pub fn exp_rand() -> f64;
    pub fn dnorm4(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pnorm5(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qnorm5(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rnorm(arg1: f64, arg2: f64) -> f64;
    pub fn pnorm_both(
        arg1: f64,
        arg2: *mut f64,
        arg3: *mut f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    );
    #[doc = "Uniform Distribution"]
    pub fn dunif(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn punif(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qunif(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn runif(arg1: f64, arg2: f64) -> f64;
    #[doc = "Gamma Distribution"]
    pub fn dgamma(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pgamma(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qgamma(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rgamma(arg1: f64, arg2: f64) -> f64;
    pub fn log1pmx(arg1: f64) -> f64;
    pub fn log1pexp(arg1: f64) -> f64;
    pub fn log1mexp(arg1: f64) -> f64;
    pub fn lgamma1p(arg1: f64) -> f64;
    #[doc = "Compute the log of a sum or difference from logs of terms, i.e.,\n\n     log (exp (logx) + exp (logy))\n or  log (exp (logx) - exp (logy))\n\n without causing overflows or throwing away too much accuracy:"]
    pub fn logspace_add(arg1: f64, arg2: f64) -> f64;
    pub fn logspace_sub(arg1: f64, arg2: f64) -> f64;
    pub fn logspace_sum(arg1: *const f64, arg2: ::std::os::raw::c_int) -> f64;
    #[doc = "Beta Distribution"]
    pub fn dbeta(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pbeta(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qbeta(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rbeta(arg1: f64, arg2: f64) -> f64;
    #[doc = "Lognormal Distribution"]
    pub fn dlnorm(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn plnorm(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qlnorm(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rlnorm(arg1: f64, arg2: f64) -> f64;
    #[doc = "Chi-squared Distribution"]
    pub fn dchisq(arg1: f64, arg2: f64, arg3: ::std::os::raw::c_int) -> f64;
    pub fn pchisq(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qchisq(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rchisq(arg1: f64) -> f64;
    #[doc = "Non-central Chi-squared Distribution"]
    pub fn dnchisq(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pnchisq(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qnchisq(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rnchisq(arg1: f64, arg2: f64) -> f64;
    #[doc = "F Distribution"]
    pub fn df(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pf(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qf(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rf(arg1: f64, arg2: f64) -> f64;
    #[doc = "Student t Distribution"]
    pub fn dt(arg1: f64, arg2: f64, arg3: ::std::os::raw::c_int) -> f64;
    pub fn pt(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qt(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rt(arg1: f64) -> f64;
    #[doc = "Binomial Distribution"]
    pub fn dbinom_raw(x: f64, n: f64, p: f64, q: f64, give_log: ::std::os::raw::c_int) -> f64;
    pub fn dbinom(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pbinom(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qbinom(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rbinom(arg1: f64, arg2: f64) -> f64;
    #[doc = "Multinomial Distribution"]
    pub fn rmultinom(
        arg1: ::std::os::raw::c_int,
        arg2: *mut f64,
        arg3: ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    );
    #[doc = "Cauchy Distribution"]
    pub fn dcauchy(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pcauchy(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qcauchy(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rcauchy(arg1: f64, arg2: f64) -> f64;
    #[doc = "Exponential Distribution"]
    pub fn dexp(arg1: f64, arg2: f64, arg3: ::std::os::raw::c_int) -> f64;
    pub fn pexp(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qexp(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rexp(arg1: f64) -> f64;
    #[doc = "Geometric Distribution"]
    pub fn dgeom(arg1: f64, arg2: f64, arg3: ::std::os::raw::c_int) -> f64;
    pub fn pgeom(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qgeom(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rgeom(arg1: f64) -> f64;
    #[doc = "Hypergeometric Distribution"]
    pub fn dhyper(arg1: f64, arg2: f64, arg3: f64, arg4: f64, arg5: ::std::os::raw::c_int) -> f64;
    pub fn phyper(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qhyper(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rhyper(arg1: f64, arg2: f64, arg3: f64) -> f64;
    #[doc = "Negative Binomial Distribution"]
    pub fn dnbinom(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pnbinom(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qnbinom(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rnbinom(arg1: f64, arg2: f64) -> f64;
    pub fn dnbinom_mu(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pnbinom_mu(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qnbinom_mu(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rnbinom_mu(arg1: f64, arg2: f64) -> f64;
    #[doc = "Poisson Distribution"]
    pub fn dpois_raw(arg1: f64, arg2: f64, arg3: ::std::os::raw::c_int) -> f64;
    pub fn dpois(arg1: f64, arg2: f64, arg3: ::std::os::raw::c_int) -> f64;
    pub fn ppois(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qpois(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rpois(arg1: f64) -> f64;
    #[doc = "Weibull Distribution"]
    pub fn dweibull(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pweibull(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qweibull(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rweibull(arg1: f64, arg2: f64) -> f64;
    #[doc = "Logistic Distribution"]
    pub fn dlogis(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn plogis(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qlogis(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rlogis(arg1: f64, arg2: f64) -> f64;
    #[doc = "Non-central Beta Distribution"]
    pub fn dnbeta(arg1: f64, arg2: f64, arg3: f64, arg4: f64, arg5: ::std::os::raw::c_int) -> f64;
    pub fn pnbeta(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qnbeta(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rnbeta(arg1: f64, arg2: f64, arg3: f64) -> f64;
    #[doc = "Non-central F Distribution"]
    pub fn dnf(arg1: f64, arg2: f64, arg3: f64, arg4: f64, arg5: ::std::os::raw::c_int) -> f64;
    pub fn pnf(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qnf(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> f64;
    #[doc = "Non-central Student t Distribution"]
    pub fn dnt(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pnt(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qnt(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    #[doc = "Studentized Range Distribution"]
    pub fn ptukey(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qtukey(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: f64,
        arg5: ::std::os::raw::c_int,
        arg6: ::std::os::raw::c_int,
    ) -> f64;
    #[doc = "Wilcoxon Rank Sum Distribution"]
    pub fn dwilcox(arg1: f64, arg2: f64, arg3: f64, arg4: ::std::os::raw::c_int) -> f64;
    pub fn pwilcox(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qwilcox(
        arg1: f64,
        arg2: f64,
        arg3: f64,
        arg4: ::std::os::raw::c_int,
        arg5: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rwilcox(arg1: f64, arg2: f64) -> f64;
    pub fn wilcox_free();
    #[doc = "Wilcoxon Signed Rank Distribution"]
    pub fn dsignrank(arg1: f64, arg2: f64, arg3: ::std::os::raw::c_int) -> f64;
    pub fn psignrank(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn qsignrank(
        arg1: f64,
        arg2: f64,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
    ) -> f64;
    pub fn rsignrank(arg1: f64) -> f64;
    pub fn signrank_free();
    #[doc = "Gamma and Related Functions"]
    pub fn gammafn(arg1: f64) -> f64;
    pub fn lgammafn(arg1: f64) -> f64;
    pub fn lgammafn_sign(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
    pub fn dpsifn(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: ::std::os::raw::c_int,
        arg5: *mut f64,
        arg6: *mut ::std::os::raw::c_int,
        arg7: *mut ::std::os::raw::c_int,
    );
    pub fn psigamma(arg1: f64, arg2: f64) -> f64;
    pub fn digamma(arg1: f64) -> f64;
    pub fn trigamma(arg1: f64) -> f64;
    pub fn tetragamma(arg1: f64) -> f64;
    pub fn pentagamma(arg1: f64) -> f64;
    pub fn beta(arg1: f64, arg2: f64) -> f64;
    pub fn lbeta(arg1: f64, arg2: f64) -> f64;
    pub fn choose(arg1: f64, arg2: f64) -> f64;
    pub fn lchoose(arg1: f64, arg2: f64) -> f64;
    #[doc = "Bessel Functions"]
    pub fn bessel_i(arg1: f64, arg2: f64, arg3: f64) -> f64;
    pub fn bessel_j(arg1: f64, arg2: f64) -> f64;
    pub fn bessel_k(arg1: f64, arg2: f64, arg3: f64) -> f64;
    pub fn bessel_y(arg1: f64, arg2: f64) -> f64;
    pub fn bessel_i_ex(arg1: f64, arg2: f64, arg3: f64, arg4: *mut f64) -> f64;
    pub fn bessel_j_ex(arg1: f64, arg2: f64, arg3: *mut f64) -> f64;
    pub fn bessel_k_ex(arg1: f64, arg2: f64, arg3: f64, arg4: *mut f64) -> f64;
    pub fn bessel_y_ex(arg1: f64, arg2: f64, arg3: *mut f64) -> f64;
    #[doc = "General Support Functions"]
    pub fn imax2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
    pub fn imin2(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
    pub fn fmax2(arg1: f64, arg2: f64) -> f64;
    pub fn fmin2(arg1: f64, arg2: f64) -> f64;
    pub fn sign(arg1: f64) -> f64;
    pub fn fprec(arg1: f64, arg2: f64) -> f64;
    pub fn fround(arg1: f64, arg2: f64) -> f64;
    pub fn fsign(arg1: f64, arg2: f64) -> f64;
    pub fn ftrunc(arg1: f64) -> f64;
    pub fn cospi(arg1: f64) -> f64;
    pub fn sinpi(arg1: f64) -> f64;
    pub fn tanpi(arg1: f64) -> f64;
    pub fn Rtanpi(arg1: f64) -> f64;
}
